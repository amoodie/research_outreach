function backwater_GUI()

    % interactive backwater module written by Andrew J. Moodie
    % see module and website for more information
    % classroom module for this model can be found at 
    % http://www.coastalsustainability.rice.edu/outreach/
    % the model setup below is parameterized to the Lower Mississippi River
    % as established by Nittrouer et al., 
    % Spatial and temporal trends, GSAB, 2012
    
    clear variables; close all;
    
    L = 1600e3; % length of domain
    nx = 400; % number of nodes
    dx = L/nx; % width of cells
    x = 0:dx:L; % define x-coordinates
    
    starteta = 43; % pin-point to start eta from
    S0 = 7e-5; % bed slope
    eta = linspace(starteta, starteta - S0*(nx*dx), nx+1); % channel bed
    
    mou = 0.75; % fraction of x channelized (i.e. mouth position)
    thet = 2; % plume spreading angle
    
    B0 = 1100; % basic channel width
    [B] = set_B(B0, mou, thet, nx, dx); % channel width
    [S] = get_slope(eta, nx, dx); % bed slope at each node
    H0 = 0; % 
    Cf = 0.0047;
    Qwinit = 10000;
    Qw = Qwinit;
    Qwbf = 35000;
    Qwmax = 60000;
    Qwmin = 5000;
    
    [H] = get_backwater_dBdx(eta, S, B, H0, Cf, Qw, nx, dx);
    [Xs] = find_backwaterregion(H, dx);
    [zed] = 0.5 + get_backwater_dBdx(eta, S, B, H0, Cf, Qwbf, nx, dx);
    
%     [nitt] = load('./nittData.mat');
%     nitt = nitt.nitt;
    
    [nitt] = load_nitt();

    % create and then hide the GUI as it is being initialized
    f = figure('Visible','off','Position',[360,500,800,600], 'Units', 'normalized', ...
        'Name', 'FloodingModule', 'NumberTitle', 'off');
    % create the axes
    hand.ax = axes('Units','Pixels','Position',[60,300,700,250], 'Units', 'normalized');
                hold on
                ylim([-50 100])
    hand.Qw = uicontrol('Style', 'slider', ...
                'Min', 5000, 'Max', 60000, 'Value', Qw, 'Position', [60, 200, 320, 25], ...
                'Units', 'normalized', 'Callback', @updateQw);
    uicontrol('Parent', f, 'Style', 'text', 'Position', [20, 195, 40, 25], ...
                'String', format_number(Qwmin), 'BackgroundColor', f.Color, 'Units', 'normalized');
    uicontrol('Parent', f, 'Style', 'text', 'Position', [380, 195, 60, 25], ...
                'String', format_number(Qwmax), 'BackgroundColor', f.Color, 'Units', 'normalized');
    uicontrol('Parent', f, 'Style', 'text', 'Position', [60, 170, 320, 25], ...
                'String', 'discharge (m^3/s)', 'BackgroundColor', f.Color, 'Units', 'normalized');
    hand.QwValue = uicontrol('Parent', f, 'Style', 'text', 'Position', [540, 490, 200, 25], ...
                'String', ['Qw = ' format_number(Qw)], 'BackgroundColor', [1 1 1], 'FontSize', 14, 'Units',  'normalized');
    
    nittpanel = uipanel('Visible','off', ...
        'Title', 'Nittrouer et al., 2011 data', 'Position', [0.675 0.24 0.28 0.17]);
    nittthal = uicontrol(nittpanel, 'Style', 'checkbox', ...
                'String', 'show thalweg', ...
                'Value', 0, 'Position', [25 50 150 30], 'units', 'normalized', ...
                'Callback', @showThal);
    nittwater = uicontrol(nittpanel, 'Style', 'checkbox', ...
                'String', 'show water lines', ...
                'Value', 0, 'Position', [25 15 150 30], 'units', 'normalized', ...
                'Callback', @showWater);
    nittpanel.Visible = 'on';
            
    uicontrol('Parent', f, 'Style', 'pushbutton', 'Position', [585, 95, 100, 25], ...
                'String', 'Reset', 'units', 'normalized', 'Callback', @reset);
    uicontrol('Parent', f, 'Style', 'pushbutton', 'Position', [585, 55, 100, 25], ...
                'String', 'About', 'units', 'normalized', 'Callback', @moduleinformation);
            
    % create data table for information
    RKs = [0 165 368 425 505];
    RKidxs = (nx*mou) - round(RKs*1000/dx);
    tab = uitable(f);
    tab.Data = {'Head of Passes (RK 0)', '0', '0', false; 'New Orleans (RK 165)', '0', '0', false; ...
        'Baton Rouge (RK 368)', '0', '0', false; 'St. Francisville (RK 425)', '0', '0', false; ...
        'Old River Diversion (RK 505)', '0', '0', false};  
    tab.ColumnName = {'location', 'flow depth (m)', 'stage (m)', 'over levee?'};
    tab.Position = [30 20 480 140];
    tab.Units = 'normalized';
    tab.ColumnWidth = {185 100 80 80};
    tab.Data(1:end, 2) = (  sprintfc( '%10.1f', (H(RKidxs))' )  ); % insert proper depths
    tab.Data(1:end, 3) = (  sprintfc( '%10.1f', (eta(RKidxs)+H(RKidxs))' )  ); % insert proper stage
    
    % make the plot into the axes
    hand.etaLine = plot(x/1000, eta, 'k-', 'LineWidth', 1.2);
    hand.zedLine = plot(x(1:nx*mou)/1000, eta(1:nx*mou)+zed(1:nx*mou), 'k--', 'LineWidth', 1.2);
    hand.Hline = plot(x/1000, eta+H, 'b-', 'LineWidth', 1.5);
    hand.mouth = plot(repmat(L*mou/1000, 1, 2), ylim, 'k--');
    hand.locs = plot(repmat(L/1000*mou-RKs(2:end), 2, 1), repmat(ylim', 1, length(RKs)-1), 'k:');
    hand.nittBed = plot(L/1000*mou - nitt.bed.RK, nitt.bed.depth, 'Marker', '.', 'LineStyle', 'none', ...
        'Color', [0.5 0.5 0.5], 'Visible', 'off');
    hand.ax.ColorOrder = [0.557,0.184,0.361;0.165,0.498,0.255;0.631,0.659,0.22];
    hand.nittWater = plot(repmat(L/1000*mou - nitt.surf.RK, 1, 3), [nitt.surf.f5k_10k, nitt.surf.f15k_20k, nitt.surf.f30k_35k], ...
        'LineStyle', '-', 'LineWidth', 1.5, 'Visible', 'off');
    hand.nittWaterLegend = legend([hand.nittWater(1), hand.nittWater(2), hand.nittWater(3)], ...
        {'10,000 m^3/s', '20,000 m^3/s', '35,000 m^3/s'}, ...
        'Location', 'NorthWest', 'LineWidth', 0.25, 'AutoUpdate','off', 'Visible', 'off');
    hand.nittWaterLegend.Visible = 'off';
    hand.bwvalue = text(((Xs(2)-Xs(1))/4 + Xs(1))/1000, 52, ...
        {'backwater from', ['RK ' num2str(L*mou/1000-round(Xs(1)/1000)), ' to ', num2str(L*mou/1000-round(Xs(2)/1000))]}, ...
        'BackgroundColor', [1 1 1]);
    hand.bwbracket = plot([Xs(1) Xs(1) Xs(2) Xs(2)]/1000, [36 40 40 36], 'k-', 'LineWidth', 1.2);
    xlim([L/1000*0.25 L/1000-(L/1000*0.125)])
    set(hand.ax, 'xTickLabels', cellfun(@num2str, num2cell(abs((cellfun(@str2num, (get(gca, 'XTickLabels')))) - (L/1000*mou))), 'UniformOutput', false))
    box on; set(hand.ax, 'FontSize', 10, 'LineWidth', 1.5);
    
    % make labels on plot
    hand.lab1 = text(L/1000*mou+6, 25, '< Head of Passes', ...
        'BackgroundColor', [1 1 1 0.85]);
    hand.lab2 = text(L/1000*mou-RKs(2)-6, -40, '\^New Orleans', ...
        'BackgroundColor', [1 1 1 0.85]);
    hand.lab3 = text(L/1000*mou-RKs(3)-7, -40, '\^Baton Rouge', ...
        'BackgroundColor', [1 1 1 0.85]);
    hand.lab4 = text(L/1000*mou-RKs(4)-120, -40, 'St. Francisville\^', ...
        'BackgroundColor', [1 1 1 0.85]);
    hand.lab5 = text(L/1000*mou-RKs(5)-155, -28, 'Old River Diversion\^', ...
        'BackgroundColor', [1 1 1 0.85]);
    xlabel('distance from Head of Passes (km)')
    ylabel('elevation (m)')
    
    % Make the UI visible.
    f.Visible = 'on';
    set(f, 'Units', 'normalized', 'Position', [0.1 0.1 0.75 0.75], 'resize', 'off')

    % define callback functions
    function updateQw(source, ~)
        Qw = source.Value;
        [H] = get_backwater_dBdx(eta, S, B, H0, Cf, Qw, nx, dx);
        [Xs] = find_backwaterregion(H, dx);
        
        set(hand.Hline, 'YData', eta+H);
        set(hand.QwValue, 'String', ['Qw = ', format_number(round(Qw))]);
        set(hand.bwbracket, 'XData', [Xs(1) Xs(1) Xs(2) Xs(2)]/1000);
        hand.bwvalue.String(2) = {['RK ' num2str(L*mou/1000-round(Xs(1)/1000)), ' to ', num2str(L*mou/1000-round(Xs(2)/1000))]};
        hand.bwvalue.Position(1) = ((Xs(2)-Xs(1))/4 + Xs(1))/1000;
        updateTable()
    end
    
    function updateTable()
        tab.Data(1:end, 2) = (  sprintfc( '%10.1f', (H(RKidxs))' )  ); % new depths
        tab.Data(1:end, 3) = (  sprintfc( '%10.1f', (eta(RKidxs)+H(RKidxs))' )  ); % new stage
        over = ((eta+H) > eta+zed);
        tab.Data(1:end, 4) = arrayfun((@(x) {x}), over(RKidxs)');
    end

    function showThal(~, ~)
        state = get(nittthal, 'Value');
        if state == 1
            set(hand.nittBed,'Visible','on');
        elseif state == 0
            set(hand.nittBed,'Visible','off');
        end
        uistack(hand.nittBed, 'top')
    end

    function showWater(~, ~)
        state = get(nittwater, 'Value');
        if state == 1
            set(hand.nittWater,'Visible', 'on');
            set(hand.nittWaterLegend,'Visible', 'on');
        elseif state == 0
            set(hand.nittWater,'Visible', 'off');
            set(hand.nittWaterLegend,'Visible', 'off');
        end
    end

    function reset(~, ~)
        temp.Value = Qwinit;
        updateQw(temp);
        hand.Qw.Value = Qwinit;
        nittthal.Value = 0;
        set(hand.nittBed,'Visible','off')
        nittwater.Value = 0;
        set(hand.nittWater,'Visible','off')
    end

    function moduleinformation(~, ~)
        uiwait(msgbox({'Model parameterization follows Nittrouer et al., 2012 for Mississippi River. The parameters can be viewed in the source code at https://github.com/amoodie/research_outreach/tree/master/flooding_risk/source', ...
            ' ', ...
            'The module was created by Andrew J. Moodie as part of an National Science Foundation funded research project assessing the sustainability of anthropogenically influenced deltas.', ...
            'The research is supported by Grant No. 1427262, and an NSF Graduate Research Fellowship to A.J.M. under Grant No. 1450681.', ...
            ' ', ...
            'For more information, please visit http://www.coastalsustainability.rice.edu/outreach/', ' ', ' '}, 'About this module', 'modal')); 
    end
end

function [H] = get_backwater_dBdx(eta, S, B, H0, Cf, Qw, nx, dx)
    % backwater formulated for changing width
    H = NaN(1,nx+1); % preallocate depth 
    H(nx+1) = abs(H0 - eta(nx+1)); % water depth at downstream boundary
    for i = nx:-1:1
        % predictor step: computation of a first estimation of the water depth Hp
        [Frsqp] = get_froude(Qw, H(i+1), B(i)); % calculate froude from conditions at i+1
        [dBdx] = (B(2:nx+1) - B(1:nx)) ./ dx;
        [dHdxp] = get_dHdx_dBdx(S(i+1), Cf, Frsqp, H(i+1), B(i), dBdx(i)); % get dHdx width changing form
        Hp = H(i+1) - dHdxp * dx; % solve for H prediction
        % corrector step: computation of H
        [Frsqc] = get_froude(Qw, Hp, B(i)); % calculate froude at i with prediction depth
        [dHdxc] = get_dHdx_dBdx(S(i), Cf, Frsqc, Hp, B(i), dBdx(i)); % doaa
        % convolution of prediction and correction, trapezoidal rule
        H(i) = H(i+1) - ( (0.5) * (dHdxp + dHdxc) * dx );
    end
    
    function [dHdx] = get_dHdx_dBdx(S_loc, Cf, Frsq, H_loc, B_loc, dBdx)
        % formulation to get dHdX for a changing width backwater formulation
        dHdx = ((S_loc-(Cf*Frsq))/(1-Frsq)) + (Frsq/(1-Frsq)) * (H_loc/B_loc) * (dBdx);
    end
  
    function [Frsq] = get_froude(Qw, H, B)
        g = 9.81; % gravitational acceleration constant
        Frsq = ( Qw^2 / (g * B^2* H^3) );
    end
end

function [Xs] = find_backwaterregion(H, dx)
    dHdx = (H(2:end)-H(1:end-1))/dx;
    dHdxdx = (dHdx(2:end)-dHdx(1:end-1))/dx;
    threshold = dHdxdx*1e9 < 0.080;
    changepts = abs(threshold(2:end) - threshold(1:end-1));
    Xs = find(changepts, 2) * dx;
end

function [B] = set_B(B0, mou, thet, nx, dx)
    B = zeros(1, nx+1);
    chanLen = mou*nx;
    B(1:chanLen) = B0;
    B(chanLen+1:end) = B0 + 2*((1:(nx+1-chanLen)) * dx * tand(thet));
end

function [S] = get_slope(eta, nx, dx)
    % return slope of input bed (eta)
    S = zeros(1,nx+1);
    S(1) = (eta(1) - eta(2)) / dx;
    S(2:nx) = (eta(1:nx-1) - eta(3:nx+1)) ./ (2*dx);
    S(nx + 1) = (eta(nx) - eta(nx + 1)) / dx;
end

function [string] = format_number(integer)
    string = sprintf(',%c%c%c',fliplr(num2str(integer)));
    string = fliplr(string(2:end));
end

function [nitt] = load_nitt()
    nitt.surf = cell2table({'HOP',0.966,0.0410,0.531,0.508,0.662,0.8,0.848,0.999,1.26;
        'Venice',17.2270,0.06,0.537,0.672,0.809,0.981,1.145,1.217,1.298;
        'Empire',47.4950,0.0830,0.495,0.751,1.071,1.335,1.565,1.718,1.855;
        'La Hache',78.4070,0.113,0.524,0.910,1.37,1.745,2.035,2.255,2.39;
        'Algeirs',142.163,0.318,0.806,1.504,2.326,3.023,3.563,4.013,4.296;
        'IHNC',149.247,0.431,0.965,1.723,2.583,3.316,3.842,4.315,4.573;
        'Harvey Lock',158.263,0.381,0.888,1.701,2.612,3.409,4.03,4.54,4.843;
        'Carrolton',165.508,0.343,0.897,1.74,2.706,3.547,4.227,4.768,5.077;
        'Bonnet Carre',208.012,0,1.08,2.39,3.528,4.368,5.122,5.712,6.222;
        'Reserve',223.307,0.498,1.18,2.478,3.754,4.876,5.854,6.519,6.977;
        'Baton Rouge',367.724,1.275,2.651,5.19,7.193,8.778,10.2260,11.2990,12.5920;
        'Red River',486.864,3.659,6.031,9.192,11.4080,13.2160,14.9340,16.12,17.6410;
        'Knox Landing',505.057,4.245,6.706,9.941,12.1680,13.9540,15.6950,16.87,18.44;
        'Natchez',582.015,7.09,9.898,13.2040,15.4160,17.3240,19.1120,20.1740,21.51;
        'Vicksburg',701.477,14.1450,17.0820,19.9710,22.10,23.8580,25.6990,26.7990,28.2720;
        'Greenville',855.393,25.38,28.2170,30.9150,32.6630,34.2360,36.0170,37.0770,38.7090;
        'Arkansas City',892.101,28.9310,31.6250,34.2180,35.9490,37.4390,39.21,40.1940,41.76;
        'Helena',1067.43,43.6120,46.3660,48.9940,50.7510,52.1180,53.9770,54.98,56.5370}, 'VariableNames', ...
        {'location','RK','lt5k','f5k_10k','f10k_15k','f15k_20k','f20k_25k','f25k_30k','f30k_35k','gt35k'});
    nitt.bed = cell2table({3.7016,-18.8010833;4.2614285714,-19.2575571429000;4.723750,-19.68950;5.1566666667,-20.0951333333000;5.636000,-20.49131;
        6.796,-21.33346;7.659,-22.94593;8.521,-23.44765;9.581,-23.92252;10.93900,-23.89580;12.29700,-24.01240;13.68800,-24.14692;15.04600,-24.40684;
        16.43700,-24.76530;17.92800,-25.39251;19.35200,-25.59869;20.91,-26.70962;22.43400,-27.31891;23.89500,-29.74660;25.15800,-33.05212;26.45500,-37.16383;
        27.68200,-37.98807;28.94,-38.13153;30.29800,-38.06002;31.65400,-37.56750;32.91300,-37.63931;34.36800,-36.18833;35.99100,-36.99470;37.57800,-35.44521;
        39.23200,-34.49588;41.01800,-32.78517;42.84,-33.64531;44.79400,-33.89635;46.91400,-34.85506;49.00200,-36.10936;51.38600,-36.03796;53.70500,-36.33382;
        55.98800,-34.90981;58.17500,-36.29849;60.29200,-34.71323;62.24500,-34.80302;64.19700,-33.49542;66.24900,-32.87757;68.06900,-31.91034;69.88900,-31.09540;
        71.41200,-31.12245;72.93400,-30.96138;74.55800,-31.65130;76.44400,-30.76470;78.19900,-30.81864;80.18400,-29.04525;82.13800,-29.40378;83.89900,-33.33639;
        85.68800,-33.91884;87.60900,-34.02655;89.72800,-34.14323;91.71500,-33.77619;93.60100,-33.19416;95.28900,-32.28963;97.01100,-32.29878;98.6,-32.31687;
        100.0900,-32.38870;101.6430,-30.09571;103.2320,-29.97944;104.5890,-29.48692;105.9800,-29.71102;107.5700,-30.40094;109.0930,-30.44590;110.6490,-30.75063;
        112.2400,-31.51221;113.9300,-32.41713;115.7190,-32.71293;117.5040,-30.98430;119.3920,-30.92181;121.2810,-32.19401;123.0690,-32.04193;124.9550,-30.97618;
        126.7790,-32.40065;128.5340,-32.22169;130.2220,-31.64859;131.6140,-32.58034;133.2690,-32.25805;134.8260,-32.67924;136.3480,-31.87322;138.0350,-30.69099;
        139.6250,-30.88824;140.8530,-32.91281;142.1780,-33.45041;143.5070,-36.11994;145.0970,-36.84568;146.8490,-34.90206;148.3060,-35.17095;150.0940,-35.17115;
        151.7840,-36.23730;153.2120,-38.54854;154.6700,-38.91596;156.2600,-39.22965;157.9800,-38.21763;159.7300,-35.14535;161.3510,-34.04374;162.9070,-33.61395;
        164.4630,-33.14833;165.8220,-33.90092;167.1140,-34.56393;168.7990,-32.62031;170.4210,-32.64737;172.0400,-30.56938;173.3630,-29.28859;174.7870,-29.10064;
        176.1120,-29.27099;177.3700,-29.43237;178.7930,-29.21754;180.0830,-27.85612;181.4080,-27.83835;182.4010,-27.44432;183.3950,-27.56088;184.5220,-28.26866;
        185.8140,-28.82418;187.2070,-30.68753;188.5980,-31.27889;190.1230,-31.88818;191.5140,-31.70919;193.1030,-31.98706;194.7900,-31.04670;196.4130,-31.12750;
        198.4330,-31.19939;200.2200,-30.42923;201.8760,-30.72501;203.4290,-28.64701;205.1490,-27.51854;206.9700,-27.95767;208.6920,-27.97577;210.5480,-28.84487;
        212.3370,-29.31087;214.2570,-29.32900;216.1420,-28.20054;218,-30.28788;220.0200,-30.00146;222.1070,-30.49436;224.1600,-30.28856;226.1120,-29.17803;
        228.0990,-29.63510;229.7570,-31.10434;231.5770,-30.61187;233.7620,-30.08362;235.6810,-29.13433;237.7630,-26.33082;239.6860,-27.99716;241.8370,-27.2897;
        243.9250,-28.29324;245.9800,-29.13549;248.1010,-29.98670;250.3180,-29.35095;252.5380,-29.70950;254.3290,-31.67142;256.0520,-32.37926;257.5760,-33.16770;
        259.0970,-31.77048;260.4560,-32.16477;261.9130,-32.58595;263.5040,-33.67;265.2260,-33.63436;266.9470,-32.98065;268.4360,-32.37170;270.0880,-29.91749;
        272.0110,-31.21657;273.9020,-33.41141;275.9880,-33.82370;278.0090,-34.79135;279.8960,-34.05703;281.9440,-31.08332;283.9940,-29.48013;286.1130,-29.08623;
        288.3650,-29.25668;290.6500,-29.41817;292.8650,-27.23275;295.2780,-24.75175;297.4650,-25.76421;299.8170,-26.45422;302.1020,-26.58884;304.2560,-27.80732;
        306.1760,-27.59256;308.1610,-26.57161;310.1470,-26.12395;311.9690,-26.91243;313.5620,-28.93704;315.2180,-29.17908;317.1350,-26.52782;318.9540,-25.17541;
        320.9750,-26.46554;322.9290,-26.75241;325.0490,-27.32593;326.9690,-27.13803;328.6570,-26.76200;330.4770,-25.50813;332.4280,-24.27219;334.1490,-23.68118;
        335.6720,-23.43950;336.9630,-23.40382;338.0210,-22.26631;338.8490,-22.06037;339.5130,-22.75914;340.1450,-24.41638;341.0400,-25.49139;342.0680,-26.71871;
        342.9630,-26.87109;343.8900,-26.46810;344.9830,-27.11317;345.9800,-28.95856;347.3040,-28.20627;348.7580,-26.379073;350.3450,-25.044563;
        352.3620,-23.011403;354.5790,-21.408233;356.6300,-20.405203;358.7150,-19.885893;360.9670,-20.351943;363.1530,-20.289483;
        365.3710,-19.940383;367.5230,-19.863;369.6430,-20.02148;371.5970,-19.91421;373.3190,-20.13834;374.6110,-20.67595;375.8040,-20.92;
        376.9970,-21.38387;377.9940,-24.11607;379.1200,-24.18786;380.3080,-21.77838;381.6990,-21.72479;383.2890,-22.39679;384.9760,-21.554957;386.6010,-23.176477;
        388.2560,-22.988547;390.1100,-23.176867;391.9630,-22.523167;393.8460,-19.074677;395.5990,-17.650606;397.4210,-18.170356;398.7780,-17.830116;
        399.8390,-19.039516;400.8350,-20.490769;401.8600,-19.469709;403.0520,-19.514629;403.9800,-19.873039;405.0060,-19.792529;406.0320,-19.712029;
        406.9920,-19.77484;408.0500,-18.83440;409.1110,-19.74820;410.2350,-18.53009;411.3940,-18.50335;412.4190,-17.84956;413.2140,-18.05568;414.1740,-18.00204;
        415.2660,-17.47366;416.2920,-17.043804;417.2200,-17.930714;417.8830,-18.181604;419.0060,-16.748504;420.0970,-15.682663;421.1210,-14.348083;
        422.2500,-15.924753;423.4080,-15.405333;424.6980,-14.527633;425.7250,-14.581493;426.9500,-14.501012;428.3730,-13.372509;429.8950,-12.906882;
        431.0230,-14.080462;432.2490,-14.510563;433.5080,-14.895883;434.8630,-13.659883;436.3230,-15.200763;437.5490,-15.317353;439.2380,-15.675853;
        440.8610,-16.15975;442.7480,-16.08830;444.8020,-16.240807;446.8530,-15.058627;449.0720,-15.426147;451.5550,-15.148737;453.9710,-13.885975;
        456.6830,-11.879765;459.4620,-10.634958;461.8140,-11.056228;464.3290,-10.106996;466.6800,-9.901233;468.7980,-9.578998;470.9500,-9.283638;
        472.8050,-9.642148;474.3620,-10.143948;475.7210,-11.00404;476.6500,-12.10594;477.4480,-14.211077;478.2420,-13.557257;479.0730,-15.492199;
        479.6360,-16.011806;480.1670,-16.495581;480.8290,-16.047772;481.5560,-14.587755;482.4820,-13.978745;483.6730,-13.737015;
        484.8640,-12.939915;486.1210,-12.089075;487.4790,-12.599815;488.5710,-12.358085;489.6970,-12.304465;490.8560,-12.259805;
        491.9150,-12.233051;493.1400,-12.403384;494.3980,-12.224369;495.3920,-12.726109;496.3850,-12.708309;497.2790,-12.350109;
        498.0740,-12.601009;499.0020,-13.156489;499.8650,-14.571898;500.7280,-16.220198;501.5930,-18.728441;502.4230,-20.520065;
        503.0870,-21.66672;503.7500,-21.61305;504.4450,-21.46980;505.4390,-21.82822;506.5650,-22.12395;507.4920,-21.44327;508.6490,-20.16245;509.9700,-17.869442;
        511.1590,-16.167622;512.1520,-15.442162;513.4090,-14.779432;514.7,-14.806452;515.9910,-14.502038;516.9850,-15.272508;517.8130,-15.120318;
        518.6410,-15.245818;519.2400,-17.091168;519.6410,-19.151476;520.4364,-19.411336;521.2315,-19.859306;521.6971,-20.898446;522.1292,-21.955496;
        522.6935,-22.86924;523.2878,-21.64210;523.9157,-20.90765;524.5759,-19.877594;525.2677,-17.629296;525.9925,-15.452665;526.5217,-15.040665;
        527.2160,-14.351005;528.3403,-13.347875;529.4960,-11.180251;530.4882,-10.411;531.6789,-9.451669;533.0354,-8.744163;534.3600,-8.815973;
        535.8180,-9.470041;537.4421,-10.563052;538.8671,-11.360442;540.2267,-12.659452;541.4197,-13.277662;542.7445,-13.519667;544.1014,-13.027151;
        545.2288,-14.093233;546.1573,-14.953269;547.5481,-14.962385;548.8718,-14.469866;550.2606,-13.198039;551.8139,-11.182745600;553.3335,-8.8360136;
        554.6229,-7.5552166;555.8145,-7.2418326;557.1076,-8.3616886;558.4316,-8.0035356;559.8884,-7.9141256;560.9152,-8.1560956;561.8772,-9.2848646;
        562.8042,-9.1595616;563.5667,-9.786683;564.3293,-10.413805;565.1229,-9.634578;566.1826,-9.706358;567.2077,-8.819660;568.3668,-8.989983;569.4592,-8.793033;
        570.7179,-9.079813;572.1083,-8.891863;573.3030,-10.656653;574.7603,-10.898673;576.1514,-11.131723;577.7086,-11.776849;578.9996,-11.508264;
        580.4561,-11.150121;581.7469,-10.729258;583.0037,-9.770933;584.0954,-9.090278;585.2202,-8.355875;586.3451,-7.702095;587.3068,-8.642757;588.4322,-8.383115;
        589.3925,-8.410095;590.3860,-8.454994;591.3127,-8.204284;592.6361,-7.4699044;594.2925,-7.9358884;595.9468,-7.0671812;597.4030,-6.6194612;
        599.1586,-7.0406612;601.0128,-6.9692112;602.8008,-6.9425382;604.5552,-6.5665132;606.2455,-7.6147522;608.1673,-8.4480332;609.7247,-9.1737778;
        610.9816,-8.3139832;612.2735,-8.6545184;613.8293,-8.3053444;615.1186,-6.9708034;616.3092,-5.9945474;617.4019,-5.9767544;618.5282,-6.2814404;
        619.9169,-4.9200284;620.8760,-4.1229004;621.8029,-3.9796814;622.9956,-4.391867;624.1556,-5.045906;625.1165,-5.449108;626.0452,-6.443509;626.9407,-7.455825;
        628.0352,-8.656273;629.1938,-8.432462;630.0556,-9.005848;630.9177,-9.794216;631.9104,-9.3374869;633.0029,-9.2032449;634.1609,-8.6300849;635.5516,-8.6033679;
        637.3057,-8.0481919;639.1926,-7.6632219;640.9461,-6.6691219;642.7010,-6.5886989;644.4888,-6.4455769;646.2766,-6.2755839;647.9983,-6.1772425;
        649.6541,-6.2401315;651.2439,-6.5815;652.5358,-6.8585325;653.5961,-7.2975785;654.5876,-6.0525775;655.5467,-5.3002395;656.4083,-5.7840495;
        657.3677,-5.1660785;658.4255,-3.9569135;659.6180,-4.252650;660.4462,-4.521472;661.2730,-3.831825;662.2331,-3.742355;663.2262,-3.581225;664.1209,-4.002335;
        665.1142,-3.912869;666.2058,-3.1784637;667.5303,-3.1965276;669.2854,-3.2952576;671.0394,-2.6684176;673.1899,-1.4772906;675.4742,-1.1281976;
        77.8238,-0.1520766;680.0082,0.5105434;682.2260,0.9850514;684.5443,0.7250194;686.7641,-0.1262059;688.8192,-1.541741;690.4097,-2.231659;691.9332,-2.446813;
        693.0925,-2.679841;694.0865,-3.1188776;695.1451,-2.4919606;696.1701,-1.4619446;697.3614,-0.9604496;698.3868,-0.2529096;699.4135,-0.3336436;700.2727,0.8397084;
        701.0691,-0.2980016;701.7986,-0.9340776;702.9255,-1.6329016;704.0838,-1.229937;704.9791,-2.0272684;706.2043,-2.0453214;707.5946,-1.7409164;
        709.0844,-1.5619304;710.5729,-0.5767554;712.1292,-0.5948454;713.7483,1.6802166;715.5034,1.5814866;716.9948,0.6766006;718.7837,0.1568566;720.6055,-0.3001880;
        722.1955,-0.7213750;723.6544,-2.065187;724.9788,-2.038462;726.8652,-1.357891;728.7848,-0.7579430;731.0710,-1.707711;733.3211,-0.7047060;735.9998,1.570234;738.4500,1.623705;
        741.0327,1.677162;743.9470,1.426021;746.6605,2.617085;749.8066,2.3480032;752.7538,2.2491382;756.0306,3.1445382;759.0101,3.5204265;762.0227,3.9679715;
        764.9043,3.4301905;767.7173,4.5316675;770.5625,6.1885175;773.1442,6.8958835;775.8927,6.7522535;778.6079,6.8056953;781.2581,6.0260833;
        783.4771,5.7212733;785.5623,6.365991;787.4505,5.855194;789.3708,5.980386;791.5222,6.580306;793.6421,6.132183;795.7282,6.131949;797.7482,6.060062;
        799.5683,6.776471;801.1884,8.370755;802.9776,7.609154;804.9324,6.8385768;807.1503,7.2503798;809.0037,7.8951188;810.9248,7.5186888;813.0108,7.5632438;
        815.1617,8.5214768;817.1813,8.6735308;819.4321,9.2465688;821.9490,8.9954688;824.7281,10.562749800;827.6066,12.040437;830.5553,10.947273;
        833.6018,10.857363;836.5479,11.421363;839.6608,11.214988;842.7726,11.734178;845.8839,12.64751;848.9957,13.18462;851.7773,13.08578;854.6250,13.07650;
        857.5712,13.66738;860.2502,15.763167;862.7663,16.013697;865.2175,15.475957;867.2038,15.825084;869.2921,14.33788;871.6776,13.388101;
        873.6658,12.438371;875.6189,12.823331;877.1422,12.760461;878.4333,12.921551;880.0230,12.724311;881.5787,13.118271;883.2010,13.234541;
        885.0882,13.377647;886.7744,15.070451;888.6273,15.97497;890.5465,16.83469;892.5339,16.39554;894.6214,15.472665;896.6760,14.379605;898.9613,13.976255;
        901.7435,13.483275;904.7890,14.038315;907.5698,14.423185;910.8160,13.679345;913.5986,12.908672;916.5137,12.146942;919.7912,12.603412;
        923.2655,14.242277;926.8405,15.039107;930.1513,15.352257;933.3615,16.543267;936.1429,16.632527;938.9903,16.865107;941.3090,16.300511;
        944.1218,17.482604;947.2,18.279494;950.0136,18.879344;952.4636,19.103004;954.7476,19.622294;957.0978,20.141574;959.0527,19.308294;
        960.9744,18.528764;963.1596,18.653934;965.4757,19.86296;967.3953,20.53457;968.8842,21.32267;970.3731,22.14661;972.0950,22.10163;973.8830,22.11934;975.2735,22.30729;
        976.9618,22.55791;978.8154,22.97871;980.3379,23.44433;982.0261,23.78453;983.9461,24.08888;985.9656,24.35739;987.9851,24.56319;989.8724,24.69735;991.9572,25.59288;
        994.0428,25.92408;995.8296,26.82861;997.6179,26.73883;999.6702,27.21336;1001.4584,27.15046;1003.3125,27.33836;1005.067,27.59793;1006.6572,27.11404;
        1008.5118,26.87197;1010.2354,25.68937;1011.9913,25.03527;1013.9467,23.84368;1016.0981,24.43465;1017.9538,23.46701;1019.9405,23.48470;
        1021.5302,23.26058;1023.1203,22.83044;1024.7088,23.40355;1025.9334,23.81547;1027.0574,25.06046;1028.3472,26.10836;1029.5039,27.58624;
        1030.4967,27.94443;1031.8527,29.00129;1033.1763,29.61026;1034.566,30.30880;1036.0874,31.46416;1037.8083,32.09100;1039.496,32.74472;1041.1184,32.78037;
        1042.8068,33.03995;1044.3973,32.34108;1045.7555,31.99158;1046.7819,32.06312;1047.7097,31.62409;1049.0026,30.60277;1050.4279,29.68893;1051.721,28.54221;
        1053.0791,28.24645;1054.5027,28.42544;1055.8592,29.18669;1057.3803,30.53912;1058.9676,31.92738;1060.6559,32.23175;1062.2778,32.66154;
        1063.6346,33.17198;1064.6284,32.85835;1066.0518,33.19858;1067.6408,33.44922;1069.1644,33.19824;1070.5554,32.96518;1071.8485,31.83637;
        1073.1752,30.35821;1074.4668,30.22370;1075.7907,30.57290;1077.114,31.43269;1078.5027,32.75827;1079.4608,34.13764;1080.3885,33.77923;1081.348,34.26283;
        1082.2424,34.04775;1083.2354,34.30741;1084.1947,34.97913;1085.0566,34.29826;1086.2828,33.63525;1087.4093,33.14245;1088.4704,32.13908;
        1089.4644,31.75379;1090.2583,32.31803;1091.0203,32.07609;1092.1125,32.43427;1093.0388,32.97163;1093.9983,33.46419;1095.0241,33.96570;
        1095.9172,34.55681;1096.7444,34.95085;1097.6041,35.76590;1098.597,36.09722;1099.5899,36.41063;1100.9135,36.95690;1101.9068,36.97471;1102.9993,37.14478;
        1104.1579,37.37755;1105.5143,38.20150;1106.7056,38.74778;1108.195,39.24924;1109.718,39.40135;1111.1749,39.43702;1112.7317,39.08750;1114.0571,38.50510;
        1115.7123,38.80051;1117.2682,39.05115;1118.8563,39.91091;1120.4446,40.59152;1122.1001,40.67196;1123.4252,40.21498;1124.9829,39.26529;1127.037,38.50366;
        1129.023,39.01402;1131.0084,39.94540;1133.1601,40.39305;1135.3118,40.80486;1137.4644,40.58067;1139.3527,40.05195;1141.4384,40.31148;1143.7578,39.35275;
        1146.1089,39.29874;1148.2617,38.96706;1150.7462,38.26808;1153.3625,37.96322;1155.4828,37.20158;1157.635,37.30883;1159.8197,37.81022;1162.2025,38.66093;
        1164.7178,39.48476;1167.2641,41.70597;1169.6126,43.38079;1171.8295,44.49129;1173.8814,45.17185;1175.9005,45.66430;1178.0844,46.69418;1180.535,46.50580;
        1182.7864,46.69366;1184.8398,46.38887;1186.7275,46.18263;1188.6148,46.25408;1190.5013,46.82716;1192.3214,47.55253;1193.943,48.20625;1195.4331,48.20608;
        1196.7913,47.77596;1197.9503,47.69521;1199.2098,46.84409;1200.634,46.61103;1201.926,46.21675;1203.2512,45.77768;1204.4785,44.39806;1205.9031,43.88731;
        1207.4594,43.86027;1209.0479,44.48713;1210.6032,45.14983;1212.1607,44.37930;1213.749,45.14948;1215.2704,46.31381;1216.7262,47.09296;1218.3146,47.77356;
        1220.1007,49.03639;1221.5907,49.08102;1223.0807,49.10772;1224.4726,48.31033;1225.9641,47.38752;1227.553,47.71877;1229.3434,46.16890;1231.0993,45.60437;
        1232.8872,45.74749;1234.576,45.69356;1236.2318,45.62171;1238.0188,46.32916;1239.8389,47.09036;1242.0228,48.10233;1244.1743,48.63059;1246.556,50.20687;
        1248.6045,53.15370;1251.1534,53.60130;1253.9688,53.02770;1256.6852,52.24808;1259.3001,52.90170;1262.3146,52.08622;1265.3285,51.63800;
        1268.1753,52.24681;1271.5198,52.14790;1274.6648,52.61335;1278.1418,52.53235;1281.916,52.97981;1285.4255,53.25710;1288.9678,53.71354;1292.7418,54.28641;
        1296.2169,55.41468;1299.5932,56.17570;1303.0709,55.56619;1306.1164,56.17497;1309.1322,54.50851;1312.112,54.73211;1314.495,55.43950;1317.0429,56.61267;
        1319.3259,57.80378;1321.4127,57.33775;1323.4341,56.29844;1325.4865,56.71922;1327.3389,57.96412;1329.4891,59.36128;1331.671,61.71690;1333.5253,61.73461;
        1335.2148,61.27758;1336.5736,60.50707;1337.999,59.48574;1339.7537,59.60199;1341.3069,61.67103;1343.0945,61.96643;1345.1479,61.73330;1346.9364,61.41958;
        1348.5604,60.38031;1350.5134,60.81006;1352.6661,60.53213;1355.1485,61.24846;1357.7291,62.68140;1360.0789,63.50524;1362.9263,63.71991;
        1365.5423,63.66588;1367.8622,62.33093;1370.2796,62.22317;1372.9269,63.39632;1375.3449,62.87651;1377.4971,62.99272;1379.6173,62.30275;
        1381.8046,61.05739;1383.9586,59.95536;1385.6818,59.02357;1387.4367,59.04128;1389.2231,60.12496;1390.7785,60.74286;1392.2032,60.16046;
        1393.6266,60.40215;1395.0838,60.19596;1396.3406,61.16324;1397.4311,62.66800;1398.4556,64.00257;1399.6127,65.24755;1400.7712,65.57886;
        1402.0299,65.27416;1403.5547,64.18116;1405.0765,65.05884;1406.9296,65.87378;1409.0489,65.79292;1411.3671700,65.55081;1413.7182800,65.45201;
        1416.1354600,65.45174;1418.4862200,65.61272;1420.8373400,65.50496;1423.2532300,66.41837;1425.7684600,67.30489;1428.1518500,67.81521;1430.2392,66.99087;
        1432.1591200,67.42958;1434.2123100,67.28603;1436.1672500,66.42588;1437.9561200,65.89718;1439.9107300,65.25201;1441.8310600,65.38616;1443.6515,65.88758;
        1445.1406700,66.48758;1446.5985800,65.85142;1448.2209300,65.95873;1449.7755900,67.04243;1451.0667600,67.19456;1452.6558,67.43624;1454.5760900,67.59726;
        1456.1994,67.06857;1457.7241900,65.99348;1459.1820600,65.38420;1460.6062500,65.15114;1462.0955200,65.67947;1463.5841500,66.63778;1465.4377200,67.12129;
        1467.4222500,68.59908;1469.4060900,70.53371;1471.2276500,70.29165;1473.6436700,71.08861;1476.0927400,71.93036;1478.8733100,72.52125;1481.6214400,72.66426;
        1484.6012200,72.89683;1487.5810800,73.07565;1490.5279,73.20968;1493.3111200,72.03592;1496.1932100,71.17566;1498.8748300,71.50680;1501.3574420,72.06190;
        1503.9062860,72.60803;1506.1238700,73.24378;1508.7379020,74.47965}, 'VariableNames', {'RK', 'depth'});
end
